<?php
/**
 * @file
 * Order system module file. Here is written main functionality.
 */

/**
 * Implements hook_permission().
 */
function order_system_permission() {
  return array(
    'administer order system' => array(
      'title' => t('Administer order system'),
      'description' => t('Allows site administrator to manage order system.'),
    ),
    'create an order' => array(
      'title' => t('Create an order'),
      'description' => t('Allows user to create an order.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function order_system_menu() {
  $items = array();

  $items['admin/config/system/order_system'] = array(
    'title' => 'Administer order system',
    'description' => 'Here you can administer order system. View orders in details, Delete orders or print them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_system_view_orders'),
    'access arguments' => array('administer order system'),
  );

  $items['admin/config/system/order_system/view'] = array(
    'title' => 'View Orders',
    'description' => 'Here you can administer order system. View orders in details, Delete orders or print them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_system_view_orders'),
    'access arguments' => array('administer order system'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1
  );

  $items['admin/config/system/order_system/email_template'] = array(
    'title' => 'Manage email template',
    'description' => 'Here you can administer order system. View orders in details, Delete orders or print them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_system_mail_template'),
    'access arguments' => array('administer order system'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );

  $items['admin/config/system/order_system/content_types'] = array(
    'title' => 'Manage content types',
    'description' => 'Here you can administer order system. View orders in details, Delete orders or print them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_system_content_types'),
    'access arguments' => array('administer order system'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3
  );

  return $items;
}

/**
 * View orders table including all operations.
 */
function order_system_view_orders() {
  $form = array();

  $form['test'] = array(
    '#markup' => 'test',
    '#weight' => 1,
  );

  return $form;
}

/**
 * Manage mail template form.
 */
function order_system_mail_template() {
  $form = array();

  // Get order system mail notification template.
  $mail_notification_template = variable_get('order_system_mail_notification_template');
  $help_text = t('Here you can change order confirmation email template using the form below.' .
    ' The available tokens are : !from, !sitename, !username, !date.');

  $form['help_text'] = array(
    '#markup' => $help_text,
    '#weight' => 1,
  );

  $form['mail_template_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Mail subject'),
    '#default_value' => $mail_notification_template['subject'],
    '#required' => TRUE,
    '#weight' => 2,
  );

  $form['mail_template_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Mail body'),
    '#default_value' => $mail_notification_template['body'],
    '#required' => TRUE,
    '#weight' => 3,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
    '#weight' => 4,
  );

  return $form;
}

/**
 * Submit handler for mail template form.
 */
function order_system_mail_template_submit($form, &$form_state) {
  // Update mail template data.
  variable_set('order_system_mail_notification_template', array(
    'subject' => $form_state['values']['mail_template_subject'],
    'body' => $form_state['values']['mail_template_body'],
  ));

  drupal_set_message(t('Configuration settings have been saved.'));
}

/**
 * Manage which content types will be available as product.
 */
function order_system_content_types() {
  $form = array();

  $help_text = t(
    'Here you can select which content type will be available as product. ' .
    'Selected content types will contain an additional field "Price" and custom ' .
    'widget, add to cart box on node view display.');

  $form['help_text'] = array(
    '#markup' => $help_text,
    '#weight' => 1,
  );

  $content_types = node_type_get_types();
  $options = array();

  // Formate options array.
  foreach ($content_types as $type => $content_type) {
    $options[$type] = $content_type->name;
  }

  $form['content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available Content types'),
    '#options' => $options,
    '#default_value' => variable_get('order_system_content_types', array()),
    '#weight' => 2,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#weight' => 3,
  );

  return $form;
}

/**
 * Submit handler for manage content types for order system form.
 */
function order_system_content_types_submit($form, &$form_state) {
  variable_set('order_system_content_types', $form_state['values']['content_types']);
  $field_name = 'field_price';
  $types = array();

  // Check if field is already created.
  if(!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'number_float',
      'cardinality' => 1,
      'active' => 1
    );
    field_create_field($field);
  }
  // Get field info
  $info_field = field_info_field($field_name);

  // Create field instance
  $field_instance = array(
    'field_name' => $field_name,
    'entity_type' => 'node',
    'label' => t('Price'),
    'required' => TRUE,
    'description' => t('Product\'s price'),
    'widget' => array(
      'type' => 'number',
    ),
  );

  foreach ($form_state['values']['content_types'] as $content_type) {
    if ($content_type) {
      // Check if current content type contains Price field
      if (isset($info_field['bundles']['node'])) {
        if (!in_array($content_type, $info_field['bundles']['node'])) {
          $field_instance['bundle'] = $content_type;
        }
      }
      else {
        $field_instance['bundle'] = $content_type;
      }

      // Add field to the content type in case is missing.
      if(isset($field_instance['bundle'])) {
        field_create_instance($field_instance);
      }
      $types[] = $content_type;
    }
  }

  $message = t('Configuration settings have been saved.');

  if (!empty($types)) {
    $message = t('Configuration settings have been saved. ' .
      'The content types: <em>!content_types</em> contain generated Price field.',
      array('!content_types' => implode(', ', $types)));
  }
  drupal_set_message($message);
}

/**
 * Implements hook_block_info().
 */
function order_system_block_info() {
  $block = array();

  $block['order_system_add_to_cart'] = array(
    'info' => t('Add to cart block.'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $block['order_system_cart_info'] = array(
    'info' => t('Cart details.'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $block;
}

/**
 * Implements hook_block_view().
 */
function order_system_block_view($delta) {
  global $user, $language;

  // Show these blocks only for those user who have "create an order" permission.
  // Get all user's permissions.
  $permissions = user_role_permissions($user->roles);
  foreach ($permissions as $perm) {
    // Check if current user has permission to create an order.
    if (!in_array('create an order', $perm)) {
      exit;
    }
  }

  $block = array();
  if ($delta == 'order_system_add_to_cart') {
    $content_types = variable_get('order_system_content_types', array());

    if (arg(1)) {
      $nid = arg(1);
      $node = node_load($nid);
    }

    foreach (array_values($content_types) as $type) {
      if ($node->type === $type) {
        $form = drupal_get_form('order_system_add_to_cart_form');
        $block['subject'] = t('Add to cart');
        $block['content'] = drupal_render($form);
      }
    }
  }
  elseif ($delta == 'order_system_cart_info') {
    global $user;

    // Get all items amount added to user's cart.
    $order = _order_system_get_unplaced_order($user->uid);
    $items = 0;
    if (!empty($order)) {
      foreach ($order as $order_item) {
        $items += $order_item->amount;
      }
    }

    $links = array();
    $links['view'] = array(
      'href' => url('cart/view', array('absolute' => TRUE)),
      'title' => t('View cart'),
      'language' => $language,
      'attributes' => array('class' => array('view-cart')),
    );
    $text = t('There are !items items added in your cart.', array(
      '!items' => $items
    ));
    $block['subject'] = t('Cart details');
    $block['content'] = theme('links', array('links' => $links)) .
      '<div id="view-cart-details-wrapper">' . $text . '<div>';
  }

  return $block;
}

/**
 * Add to cart form.
 * @return
 * Returns add to cart form
 */
function order_system_add_to_cart_form($form, &$form_state) {
  global $user;

  $form = array();
  $nid = arg(1);
  $order = _order_system_get_unplaced_order($user->uid); // Get full unplaced order.

  if (!empty($order)) {
    foreach ($order as $order_item) {
      $form['oid'] = array(
        '#type' => 'hidden',
        '#value' => $order_item->oid
      );

      if ($order_item->nid == $nid) {
        $amount = $order_item->amount;

        $form['oiid'] = array(
          '#type' => 'hidden',
          '#value' => $order_item->oiid
        );

        $form['amount'] = array(
          '#type' => 'hidden',
          '#value' => $order_item->amount
        );
      }
    }
  }

  $form['add_to_cart'] = array(
    '#type' => 'submit',
    '#value' => t('Add to cart'),
    '#ajax' => array(
      'callback' => '_order_system_cart_item_process',
      'wrapper' => 'add-to-cart-wrapper',
      'effect' => 'fade',
      'method' => 'replace'
    ),
    '#id' => 'add-to-cart-bnt',
    '#weight' => 1,
  );

  $form['remove_from_to_cart'] = array(
    '#type' => 'submit',
    '#value' => t('Remove from cart'),
    '#ajax' => array(
      'callback' => '_order_system_cart_item_process',
      'wrapper' => 'add-to-cart-wrapper',
      'effect' => 'fade',
      'method' => 'replace',
    ),
    '#id' => 'remove-from-cart-bnt',
    '#weight' => 2,
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid
  );

  return $form;
}

/**
 * Order system ajax callback add to cart process.
 */
function _order_system_cart_item_process(&$form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  return _order_system_db_process($form_state['values']);
}

/**
 * Get product info from active orders table.
 * @param Integer $uid
 *   User id
 * @return Array
 *   Return an array with all order data from active orders table
 */
function _order_system_get_unplaced_order($uid) {
  // Get unplaced order added by current user (if exists).
  $order = db_select('order_system_orders', 'oso');
  $order->leftJoin('order_system_order_item', 'osoi', 'osoi.oid = oso.oid');
  $order
    ->fields('oso', array('oid', 'uid'))
    ->fields('osoi', array('oiid', 'nid', 'amount'))
    ->condition('oso.uid', $uid, '=')
    ->condition('oso.order_state', 0, '=');
  $result = $order->execute()->fetchAll();

  return $result ? $result : array();
}

/**
 * Database process. Inserting orders into db.
 * @param Array $form_values
 * Submitted form values
 */
function _order_system_db_process($form_values) {
  if (isset($form_values)) {
    global $user;

    $new_amount = 0;
    if (isset($form_values['oid'])) {
      $new_amount = $form_values['amount']; // Get current amount.
      $order_item_id = $form_values['oiid']; // Get order item id.
      $order_id = $form_values['oid']; // Get order id.
    }
    $nid = $form_values['nid']; // Get product id.

    if ($form_values['op'] == $form_values['add_to_cart']) { // "Add to cart" button was clicked
      if ($new_amount) {
        // Increment amount for current product added to cart.
        $new_amount++;
        db_update('order_system_order_item')
          ->fields(array('amount' => $new_amount))
          ->condition('oiid', $order_item_id, '=')
          ->execute();
      }
      else {
        $new_amount = 1;
        if (!isset($order_id)) {
          // Insert new order into db
          $order_id = db_insert('order_system_orders')
            ->fields(array(
              'uid' => $user->uid,
              'created' => time(),
              'updated' => time(),
            ))
            ->execute();
        }
        // Insert order item into current order.
        db_insert('order_system_order_item')
          ->fields(array(
            'oid' => $order_id,
            'nid' => $nid,
            'amount' => $new_amount,
          ))
        ->execute();
      }
    }
    else { // "Remove from cart" button was clicked
      // Decrement ammount for current added to cart product
      if ($new_amount && $new_amount > 1) {
        db_update('order_system_order_item')
          ->fields(array('amount' => $new_amount-1))
          ->condition('oiid', $order_item_id, '=')
          ->execute();
        $new_amount--;
      }
      elseif($new_amount == 1) {
        db_delete('order_system_order_item')
          ->condition('oiid', $order_item_id)
          ->execute();

        db_delete('order_system_orders')
          ->condition('oid', $order_id)
          ->execute();
        $new_amount = 0;
      }
    }
    $form['add_to_cart_info']['#markup'] = '<p class="add-to-cart-info">' .
      t('!amount items added to card.', array('!amount' => $new_amount)) . '</p>';
  }

  $commands = array(
    ajax_command_replace('#add-to-cart-wrapper', render($form['add_to_cart_info'])),
  );

  return array('#type' => 'ajax', '#commands' => $commands);
}
