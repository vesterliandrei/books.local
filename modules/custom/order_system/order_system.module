<?php
/**
 * @file
 * Order system module file. Here is written main functionality.
 */

/**
 * Implements hook_permission().
 */
function order_system_permission() {
  return array(
    'administer order system' => array(
      'title' => t('Administer order system'),
      'description' => t('Allows site administrator to manage order system.'),
    ),
    'create an order' => array(
      'title' => t('Create an order'),
      'description' => t('Allows user to create an order.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function order_system_menu() {
  $items = array();

  $items['admin/config/system/order_system'] = array(
    'title' => 'Administer order system',
    'description' => 'Here you can administer order system. View orders in details, Delete orders or print them.',
    'page callback' => 'order_system_view_orders',
    // 'page arguments' => array('order_system_view_orders'),
    'access arguments' => array('administer order system'),
  );

  $items['admin/config/system/order_system/view'] = array(
    'title' => 'View Orders',
    'description' => 'Here you can administer order system. View orders in details, Delete orders or print them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_system_view_orders'),
    'access arguments' => array('administer order system'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/system/order_system/email_template'] = array(
    'title' => 'Manage email template',
    'description' => 'Here you can administer order system. View orders in details, Delete orders or print them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_system_mail_template'),
    'access arguments' => array('administer order system'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/config/system/order_system/content_types'] = array(
    'title' => 'Manage content types',
    'description' => 'Here you can administer order system. View orders in details, Delete orders or print them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_system_content_types'),
    'access arguments' => array('administer order system'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  $items['cart/view'] = array(
    'title' => 'Cart details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_system_cart_view'),
    'access arguments' => array('create an order'),
    'file' => 'order_system.mail.inc',
    'file path' => drupal_get_path('module', 'order_system'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function order_system_theme() {
  return array(
    'cart_view_table' => array('render element' => 'element'),
  );
}

/**
 *
 * Theme view cart details table.
 */
function theme_cart_view_table($vars) {
  $element = $vars['element'];
  $img_path = drupal_get_path('module', 'order_system') . '/style/img/';

  $op =
    '<div class="operations">' .
      '<img class="increase" src="/' . $img_path . '/increase.png"/>' .
      '<img class="decrease" src="/' . $img_path . '/decrease.png"/>' .
      '<img class="remove" src="/' . $img_path . '/remove.png"/>' .
    '</div>';

  // Return table theme in case there are order items in current order.
  if (count(element_children($element)) > 2) {
    $rows = array();
    $total_amount = 0;
    foreach (element_children($element) as $key) {
      if ($key != 'update' && $key != 'place_order') {
        $rows[] = array(
          array('data' => $element[$key]['title']['#value']),
          array('data' => render($element[$key]['amount']) . $op)
        );
        $total_amount += $element[$key]['amount']['#value'];
      }
    }
    $rows[] = array(
      array('data' => t('Total') . ': ' . $total_amount),
      array('data' => render($element['place_order'])),
    );
    $rows[] = array(
      array('data' => render($element['update']), 'colspan' => '2'),
    );

    $header = array(t('Product title'), t('Amount'));
    return theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    // Return empty help text in case there are no items in the current order.
    return render($element['empty_text']);
  }
}

/**
 * View cart details form.
 */
function order_system_cart_view($form, &$form_state) {
  global $user;

  // Load module's css/js files.
  drupal_add_css(drupal_get_path('module', 'order_system') . '/style/css/order_system.css', 'file');

  // Ajax submit update button process.
  if (isset($form_state['values'])) {
    // Get order id from cliecked button extra data.
    $oid = $form_state['clicked_button']['#extra_data']['oid'];

    // Place order button was clicked
    if ($form_state['clicked_button']['#name'] == 'place_order') {
      $fields = array('order_state' => 'ready', 'placed' => time());

      $mail_notification_template = variable_get('order_system_mail_notification_template');

      if ($mail_notification_template['notify']) {
        order_system_mail_send();
      }

      db_update('order_system_orders')
        ->fields($fields)
        ->condition('oid', $oid, '=')->execute();

      drupal_set_message(t('Order !order_number was successfuly placed !',
        array('!order_number' => $oid)));
    }
    else {
      // Update button was clicked
      foreach ($form_state['values']['order'] as $key => $item) {
        if ($item['amount']) {
          db_update('order_system_order_item')
            ->fields(array('amount' => $item['amount']))
            ->condition('oiid', $key, '=')->execute();

          db_update('order_system_orders')
            ->fields(array('updated' => time()))
            ->condition('oid', $oid, '=')->execute();
        }
        else {
          db_delete('order_system_order_item')
            ->condition('oiid', $key, '=')->execute();
        }
      }
    }
  }
  $order = _order_system_get_unplaced_order($user->uid); // Get full unplaced order.

  $form = array();
  $form['order'] = array(
    '#prefix' => '<div id="cart-wrapper">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'cart_view_table'
  );

  if (!empty($order['items'])) {
    foreach ($order['items'] as $order_item) {
      // Get product object
      $product = node_load($order_item->nid);
      $form['order'][$order_item->oiid] = array(
        '#type' => 'fieldset',
        '#collapsible' => FALSE,
        '#default_value' => $order_item->amount,
        'amount' => array(
          '#type' => 'textfield',
          '#default_value' => $order_item->amount,
          '#size' => 3,
        ),
        'title' => array(
          '#type' => 'value',
          '#value' => $product->title
        ),
      );
    }

    $form['order']['place_order'] = array(
      '#type' => 'button',
      '#name' => 'place_order',
      '#value' => t('Place order'),
      '#extra_data' => array('oid' => $order_item->oid),
      '#ajax' => array(
        'callback' => '_order_system_update_amount',
        'wrapper' => 'cart-wrapper',
      ),
    );

    $form['order']['update'] = array(
      '#type' => 'button',
      '#attributes' => array('class' => array('element-invisible'),),
      '#value' => t('Update'),
      '#name' => 'update',
      '#extra_data' => array('oid' => $order_item->oid),
      '#ajax' => array(
        'callback' => '_order_system_update_amount',
        'wrapper' => 'cart-wrapper',
      ),
    );

    $form['#attached']['js'] = array(
      array(
        'type'  => 'file',
        'data' => drupal_get_path('module', 'order_system') . '/order_system.js',
      ),
    );
  }
  else {
    // Return empty text in case there is no active order for current user.
    $empty_text = t('There are no products added to your cart.');
    $form['order']['empty_text'] = array('#markup' => $empty_text);
  }

  return $form;
}

/**
 * Update order item amount ajax callback process.
 */
function _order_system_update_amount($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#cart-wrapper', render($form['order']));
  $commands[] = array('command' => 'cart_page_operations');

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Update order state ajax callback process.
 */
function _order_system_update_order_state($form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#order-state-wrapper', render($form['order_states']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
* Function for displaing form on view orders table for updatind amount.
* This for updated speciffic order item only.
*
* @param $form array
*   Form array. Includes all form elements.
* @param $form_state array
*   Form state array datta. Contains submitted data after form submit.
* @param $amount integer
*   Additional param for setting default amount value for textfield.
* @param $oiid integer
*   Order item id value.
* @param $oid integer
*   Order id value.
*/
function order_system_orders_operation_form($form, &$form_state, $amount, $oid, $oiid) {
  $form = array();

  // Ajax submit update button process.
  if (isset($form_state['values'])) {
    // Delete order item button was clicked
    if ($form_state['clicked_button']['#name'] == 'delete') {
      db_delete('order_system_order_item')
        ->condition('oiid', $oiid, '=')->execute();
      // Update current order updated time.
      db_update('order_system_orders')
        ->fields(array('updated' => time()))
        ->condition('oid', $oid, '=')->execute();
    }
    else {
      // Update order item amount button was clicked.
      // Get new amount textfield value and set it into db.
      if ($form_state['values']['amount']) {
        db_update('order_system_order_item')
          ->fields(array('amount' => $form_state['values']['amount']))
          ->condition('oiid', $oiid, '=')->execute();
        // Update current order updated time.
        db_update('order_system_orders')
          ->fields(array('updated' => time()))
          ->condition('oid', $oid, '=')->execute();
      }
    }
  }

  $form['amount'] = array(
    '#type' => 'textfield',
    '#default_value' => $amount,
    '#size' => 2
  );

  // Formate operarions buttons.
  $form['update'] = array(
    '#prefix' => '<div id="op-wrapper">',
    '#type' => 'button',
    '#name' => 'update',
    '#value' => t('update'),
    '#ajax' => array(
      'callback' => '_order_system_update_amount',
      'wrapper' => 'cart-wrapper',
    ),
  );

  $form['delete'] = array(
    '#suffix' => '</div>',
    '#type' => 'button',
    '#name' => 'delete',
    '#value' => t('delete'),
    '#ajax' => array(
      'callback' => '_order_system_update_amount',
      'wrapper' => 'cart-wrapper',
    ),
  );

  return $form;
}

/**
* Function for displaing form on view orders table the list or order states.
* Default selected value is order's state.
*
* @param $form array
*   Form array. Includes all form elements.
* @param $form_state array
*   Form state array datta. Contains submitted data after form submit.
* @param $order_state string
*   Additional param for setting default order state in order state list.
* @param $oid integer
*   Order id value.
*/
function order_system_status_list_form($form, &$form_state, $order_state, $oid) {
  $form = array();

  if (isset($form_state['values'])) {
    $order_state = $form_state['values']['order_states'];
    // Update current order updated time.
    db_update('order_system_orders')
      ->fields(array('updated' => time(), 'order_state' => $order_state))
      ->condition('oid', $oid, '=')->execute();
  }

  // Formate order states list.
  $order_state_list = array(
    'new' => 'new',
    'feedback' => 'feedback',
    'ready' => 'ready',
    'closed' => 'closed'
  );

  $form['order_states'] = array(
    '#prefix' => '<div id="order-state-wrapper">',
    '#suffix' => '</div>',
    '#type' => 'select',
    '#options' => $order_state_list,
    '#default_value' => $order_state,
    '#ajax' => array(
      'callback' => '_order_system_update_order_state',
      'wrapper' => 'order-state-wrapper',
    ),
  );

  return $form;
}


/**
* Function for displaing a filter form on view orders page.
*
* @param $form array
*   Form array. Includes all form elements.
* @param $form_state array
*   Form state array datta. Contains submitted data after form submit.
*/
function order_system_view_order_filters($form, &$form_state) {
  $form = array();

  if (isset($form_state['values'])) {
    // Get clicked button name.
    $clicked_button = $form_state['clicked_button']['#name'];
    $params = array();

    if ($clicked_button == 'apply') {
      // Add filter form params as GET params in the url.
      $params = array('query' => array());
      if ($form_state['values']['oid']) {
        $params['query']['oid'] = $form_state['values']['oid'];
      }
      if ($form_state['values']['order_state']) {
        $params['query']['order_state'] = $form_state['values']['order_state'];
      }
      if ($form_state['values']['created']) {
        $params['query']['created'] = $form_state['values']['created'];
      }
      if ($form_state['values']['updated']) {
        $params['query']['updated'] = $form_state['values']['updated'];
      }
    }
    // Make redirect to the current url with GET params included.
    drupal_goto($_GET['q'], $params);
  }

  // Add filters container inline.
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  // Set filter by order number.
  $form['filters']['oid'] = array(
    '#type' => 'textfield',
    '#title' => t('Order number'),
    '#default_value' => (isset($_GET['oid']) ? $_GET['oid'] : null),
    '#size' => 2
  );
  // Formate order states list.
  $order_state_list = array(
    'new' => 'new',
    'feedback' => 'feedback',
    'ready' => 'ready',
    'closed' => 'closed'
  );
  // Formate order state list filter.
  $form['filters']['order_state'] = array(
    '#type' => 'select',
    '#options' => $order_state_list,
    '#default_value' => 1,
  );
  // Formate created date popup field.
  $dateformat = 'Y-m-d';
  $value = null;
  $form['filters']['created'] = array(
    '#title' => t('Created'),
    '#type' => 'date_popup',
    '#date_label_position' => 'hidden',
    '#date_timezone' => date_default_timezone(),
    '#date_format' => $dateformat,
    '#date_year_range' => '-3:+3',
    '#label' => t('Created'),
    '#default_value' => (isset($_GET['created']) ? $_GET['created'] : null),
  );
  // Formate updated date popup field.
  $form['filters']['updated'] = array(
    '#title' => t('Updated'),
    '#type' => 'date_popup',
    '#date_label_position' => 'hidden',
    '#date_timezone' => date_default_timezone(),
    '#date_format' => $dateformat,
    '#date_year_range' => '-3:+3',
    '#label' => t('Updated'),
    '#default_value' => (isset($_GET['updated']) ? $_GET['updated'] : null),
  );
  // Add apply filter button.
  $form['filters']['apply'] = array(
    '#type' => 'button',
    '#name' => 'apply',
    '#value' => t('Apply'),
  );
  // Add reset filter button.
  $form['filters']['reset'] = array(
    '#type' => 'button',
    '#name' => 'reset',
    '#value' => t('Reset'),
  );

  return $form;
}

/**
 * View orders table including all operations.
 */
function order_system_view_orders() {
  global $base_url;

  // Formate table header.
  $header = array(
    array('data' => '#', 'field' => 'oso.oid'),
    array('data' => t('Status'), 'field' => 'oso.order_state'),
    array('data' => t('Order items')),
    array('data' => t('Created'), 'field' => 'oso.created'),
    array('data' => t('Updated'), 'field' => 'oso.updated'),
    array('data' => t('Operations')),
  );
  $pager_limit = 5;
  $orders = _order_system_get_orders($header, $pager_limit); // Get all orders list.
  // Add table filter form.
  $output = '';
  $total = 0;

  $rows = array();
  $rowspan = array();
  foreach ($orders as $order) {
    if (!isset($rowspan[$order->oid])) {
      $rowspan[$order->oid] = 1;
      $total++;
    }
    else {
      $rowspan[$order->oid]++;
    }
  }
  $current_oid = 0;

  foreach ($orders as $order_item) {
    $cell = array();

    if ($current_oid != $order_item->oid) {
      // Formate order items list.
      $cell[] = array('data' => $order_item->oid, 'rowspan' => $rowspan[$order_item->oid]);
      // Set order state list with current order's state selected.
      $cell[] = array(
        'data' => drupal_get_form(
          'order_system_status_list_form',
          $order_item->order_state, // Current order state.
          $order_item->oid          // Current order id.
        ),
        'rowspan' => $rowspan[$order_item->oid]
      );
      // Update current order id value.
      $current_oid = $order_item->oid;
    }
    else {
      // Update current order id value.
      $current_oid = $order_item->oid;
    }
    // Set product title with link to the node.
    $cell[] = array('data' => '<a href="' . $base_url . '/node/' . $order_item->nid . '">' . $order_item->title . '</a>');
    // Set created date value.
    $cell[] = array('data' => date('Y-m-d H:i:s', $order_item->created));
    // Set last updated date value.
    $cell[] = array('data' => date('Y-m-d H:i:s', $order_item->updated));
    // Set operations buttons.
    $cell[] = array(
      'data' => drupal_get_form(
        'order_system_orders_operation_form',
        $order_item->amount,  // Current order item amount.
        $order_item->oid,     // Current order id.
        $order_item->oiid     // Current order item id.
      )
    );
    // Set new table row.
    $rows[] = array('data' => $cell);
  }

  //pager_default_initialize($total, $pager_limit, $element = 0);
  $form = drupal_get_form('order_system_view_order_filters');
  $output .= drupal_render($form);
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t("There are no orders.")));
  $output .= theme('pager');

  return $output;
}

/**
* Get all orders list function.
*/
function _order_system_get_orders($header, $limit) {
  // Default results array.
  $result = array();

  // Get all orders.
  $orders = db_select('order_system_orders', 'oso');
  $orders->Join('order_system_order_item', 'osoi', 'osoi.oid = oso.oid');
  $orders->Join('node', 'n', 'n.nid = osoi.nid');
  $orders
    // Add table paged extender.
    ->fields('oso')
    ->fields('n', array('title'))
    ->fields('osoi', array('oiid', 'nid', 'amount'))
    // Add table sort extender.
    ->extend('PagerDefault')
    ->limit($limit)
    ->extend('TableSort')
    // Add order by headers.
    ->orderByHeader($header);
  $result = $orders->execute()->fetchAll();

  return $result;
}

/**
 * Manage mail template form.
 */
function order_system_mail_template() {
  $form = array();

  // Get order system mail notification template.
  $mail_notification_template = variable_get('order_system_mail_notification_template');
  $help_text = t('Here you can change order confirmation email template using the form below.' .
    ' The available tokens are : !from, !sitename, !username, !date.');

  $form['help_text'] = array(
    '#markup' => $help_text,
    '#weight' => 1,
  );

  $form['mail_template_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Mail subject'),
    '#default_value' => $mail_notification_template['subject'],
    '#required' => TRUE,
    '#weight' => 2,
  );

  $form['mail_template_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Mail body'),
    '#default_value' => $mail_notification_template['body'],
    '#required' => TRUE,
    '#weight' => 3,
  );

  $description = t('Check this option in case you want to send an email notification for users who placed an order.');
  $form['mail_template_notify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Email notify'),
    '#description' => $description,
    '#default_value' => $mail_notification_template['notify'],
    '#weight' => 4,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
    '#weight' => 5,
  );

  return $form;
}

/**
 * Submit handler for mail template form.
 */
function order_system_mail_template_submit($form, &$form_state) {
  // Update mail template data.
  variable_set('order_system_mail_notification_template', array(
    'subject' => $form_state['values']['mail_template_subject'],
    'body' => $form_state['values']['mail_template_body'],
    'notify' => $form_state['values']['mail_template_notify'],
  ));

  drupal_set_message(t('Configuration settings have been saved.'));
}

/**
 * Manage which content types will be available as product.
 */
function order_system_content_types() {
  $form = array();

  $help_text = t(
    'Here you can select which content type will be available as product. ' .
    'Selected content types will contain an additional field "Price" and custom ' .
    'widget, add to cart box on node view display.');

  $form['help_text'] = array(
    '#markup' => $help_text,
    '#weight' => 1,
  );

  $content_types = node_type_get_types();
  $options = array();

  // Formate options array.
  foreach ($content_types as $type => $content_type) {
    $options[$type] = $content_type->name;
  }

  $form['content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available Content types'),
    '#options' => $options,
    '#default_value' => variable_get('order_system_content_types', array()),
    '#weight' => 2,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#weight' => 3,
  );

  return $form;
}

/**
 * Submit handler for manage content types for order system form.
 */
function order_system_content_types_submit($form, &$form_state) {
  variable_set('order_system_content_types', $form_state['values']['content_types']);
  $field_name = 'field_price';
  $types = array();

  // Check if field is already created.
  if(!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'number_float',
      'cardinality' => 1,
      'active' => 1
    );
    field_create_field($field);
  }
  // Get field info
  $info_field = field_info_field($field_name);

  // Create field instance
  $field_instance = array(
    'field_name' => $field_name,
    'entity_type' => 'node',
    'label' => t('Price'),
    'required' => TRUE,
    'description' => t('Product\'s price'),
    'widget' => array(
      'type' => 'number',
    ),
  );

  foreach ($form_state['values']['content_types'] as $content_type) {
    if ($content_type) {
      // Check if current content type contains Price field
      if (isset($info_field['bundles']['node'])) {
        if (!in_array($content_type, $info_field['bundles']['node'])) {
          $field_instance['bundle'] = $content_type;
        }
      }
      else {
        $field_instance['bundle'] = $content_type;
      }

      // Add field to the content type in case is missing.
      if(isset($field_instance['bundle'])) {
        field_create_instance($field_instance);
      }
      $types[] = $content_type;
    }
  }

  $message = t('Configuration settings have been saved.');

  if (!empty($types)) {
    $message = t('Configuration settings have been saved. ' .
      'The content types: <em>!content_types</em> contain generated Price field.',
      array('!content_types' => implode(', ', $types)));
  }
  drupal_set_message($message);
}

/**
 * Implements hook_block_info().
 */
function order_system_block_info() {
  $block = array();

  $block['order_system_add_to_cart'] = array(
    'info' => t('Add to cart block.'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $block['order_system_cart_info'] = array(
    'info' => t('Cart details.'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $block;
}

/**
 * Custom function for checking if user has "create an order" permission.
 *
 * @global type $user
 * @return boolean
 * Return boolean true/false. True for users who has permission and false for those
 * who hasn't.
 */
function _order_system_create_order_permission() {
  global $user;

  $result = false;
  // Get all user's permissions.
  $permissions = user_role_permissions($user->roles);
  if (!empty($permissions)) {
    foreach ($permissions as $perm) {
      $perm = array_keys($perm);
      // Check if current user has permission to create an order, if not hide block.
      if (in_array('create an order', $perm)) {
        $result = true;
      }
    }
  }
  return $result;
}

/**
 * Implements hook_block_view().
 */
function order_system_block_view($delta) {
  global $user, $language;

  $block = array();
  $show_block = _order_system_create_order_permission();

  // Show these blocks only for those user who have "create an order" permission.
  if ($show_block) {
    if ($delta == 'order_system_add_to_cart') {
      $content_types = variable_get('order_system_content_types', array());

      if (arg(1)) {
        $nid = arg(1);
        $node = node_load($nid);
      }

      if (!empty($content_types)) {
        foreach (array_values($content_types) as $type) {
          if ($node->type === $type) {
            $form = drupal_get_form('order_system_add_to_cart_form');
            $block['subject'] = t('Add to cart');
            $block['content'] = drupal_render($form);
          }
        }
      }

    }
    elseif ($delta == 'order_system_cart_info') {
      // Get all items amount added to user's cart.
      $order = _order_system_get_unplaced_order($user->uid);

      $links = array();
      $links['view'] = array(
        'href' => url('cart/view', array('absolute' => TRUE)),
        'title' => t('View cart'),
        'language' => $language,
        'attributes' => array('class' => array('view-cart')),
      );
      $text = t('There are !items items added in your cart.', array(
        '!items' => $order['total_amount']
      ));
      $block['subject'] = t('Cart details');
      $block['content'] = theme('links', array('links' => $links)) .
        '<div id="view-cart-details-wrapper"><p>' . $text . '</p><div>';
    }
  }
  return $block;
}

/**
 * Add to cart form.
 * @return
 * Returns add to cart form
 */
function order_system_add_to_cart_form($form, &$form_state) {
  global $user;

  $form = array();
  $order = _order_system_get_unplaced_order($user->uid); // Get full unplaced order.

  // Formate form hidden order data.
  $form['total_amount'] = array(
    '#type' => 'value',
    '#value' => $order['total_amount'],
  );

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => !isset($form_state['values']) ? arg(1) : $form_state['values']['nid'],
  );

  $form['add_to_cart'] = array(
    '#type' => 'button',
    '#value' => t('Add to cart'),
    '#ajax' => array(
      'callback' => '_order_system_cart_item_process',
      'wrapper' => 'view-cart-details-wrapper',
    ),
    '#weight' => 1,
  );

  $form['remove_from_to_cart'] = array(
    '#type' => 'button',
    '#value' => t('Remove from cart'),
    '#ajax' => array(
      'callback' => '_order_system_cart_item_process',
      'wrapper' => 'view-cart-details-wrapper',
    ),
    '#weight' => 2,
  );

  // Ajax form submit process.
  if (isset($form_state['values'])) {
    $data = $form_state['values'];
    $data['oid'] = $order['oid'];

    if (!empty($order['items'])) {
      foreach ($order['items'] as $order_item) {
        if ($order_item->nid == $data['nid']) {
          $data['oiid'] = $order_item->oiid;
          $data['amount'] = $order_item->amount;
        }
      }
    }
    _order_system_db_process($data);
  }

  return $form;
}

/**
 * Order system ajax callback add to cart process.
 */
function _order_system_cart_item_process($form, $form_state) {
  global $user;

  $order = _order_system_get_unplaced_order($user->uid); // Get full unplaced order.
  $cart_info = '<div id="view-cart-details-wrapper"><p>'.
    t('There are !items items added in your cart.',
    array ('!items' => $order['total_amount'])) . '</p></div>';

  $commands = array(
    ajax_command_replace('#view-cart-details-wrapper', $cart_info),
  );
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Get product info from active orders table.
 * @param Integer $uid
 *   User id
 * @return Array
 *   Return an array with all order data from active orders table
 */
function _order_system_get_unplaced_order($uid) {
  $result = array('oid' => 0, 'total_amount' => 0, 'items' => array());

  // Get unplaced order added by current user (if exists).
  $order = db_select('order_system_orders', 'oso');
  $order->Join('order_system_order_item', 'osoi', 'osoi.oid = oso.oid');
  $order
    ->fields('oso', array('oid', 'uid'))
    ->fields('osoi', array('oiid', 'nid', 'amount'))
    ->condition('oso.uid', $uid, '=')
    ->condition('oso.order_state', 'new', '=');
  $order = $order->execute()->fetchAll();

  if (!empty($order)) {
    $result['oid'] = $order[0]->oid;
    foreach ($order as $order_item) {
      $result['items'][] = $order_item;
      $result['total_amount'] += $order_item->amount;
    }
  }

  return $result;
}

/**
 * Database process. Inserting orders into db.
 * @param Array $form_values
 *   Submitted form values form ajax callback
 */
function _order_system_db_process($form_values) {
  if (isset($form_values)) {
    global $user;

    $amount = $form_values['amount']; // Get current amount.
    $oiid = $form_values['oiid'];     // Get order item id.
    $oid = $form_values['oid'];       // Get order id.
    $nid = $form_values['nid'];       // Get product id (node id).

    // "Add to cart" button was clicked
    if ($form_values['op'] == $form_values['add_to_cart']) {
      // Check if order was created.
      if ($oid) {
        if ($amount) {
          // Increment amount for current product added to cart.
          db_update('order_system_order_item')
            ->fields(array('amount' => $amount+1))
            ->condition('oiid', $oiid, '=')->execute();

          db_update('order_system_orders')
            ->fields(array('updated' => time()))
            ->condition('oid', $oid, '=')->execute();
        }
        else {
          db_insert('order_system_order_item')
            ->fields(array('oid' => $oid, 'nid' => $nid, 'amount' => 1))->execute();
        }
      }
      else {
        // Order is not created yet. Add new one with an item.
        $oid = db_insert('order_system_orders')
          ->fields(array('uid' => $user->uid, 'created' => time(), 'updated' => time()))->execute();

        db_insert('order_system_order_item')
          ->fields(array('oid' => $oid, 'nid' => $nid, 'amount' => 1))->execute();
      }
    }
    else { // "Remove from cart" button was clicked
      if ($oid) {
        // Decrement ammount for current added to cart product
        if ($amount > 1) {
          db_update('order_system_order_item')
            ->fields(array('amount' => $amount-1))
            ->condition('oiid', $oiid, '=')->execute();

          db_update('order_system_orders')
            ->fields(array('updated' => time()))
            ->condition('oid', $oid, '=')->execute();
        }
        elseif($amount == 1) {
          db_delete('order_system_order_item')
            ->condition('oiid', $oiid, '=')->execute();
        }
      }
    }
  }
}
